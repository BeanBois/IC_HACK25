# Prompt for generating game rules using a machine learning model
prompt:
  global: 
    instruction: |
      As part of a game, testing the player on a siutation where a fire alarm is happening. You need to ensure that the following types of events happen at least once in this order:
        1. Start the game with a mundane office task (such as sending an apology email as to why you can't make a work social) and trigger the fire alarm after completion.
        2. Be accompanied by a friend at the start of the evacuation sequence.
        3. The player is alerted that they hear someone calling for help.
        4. The player is separated rrom their friend.
        5. The player is forced to adjust their strategy (some event occurs that makes their current startegy unworkable).
        6. When the player escapes the emergency services has not arrived.
        7. End the game.
        8. Try to encourage the game to finish in 3 prompts
      You should remmain on tasks
    global_rules: |
      YOU MUST NEVER PREVENT OR CRITISE THE PLAYER FROM COMMITTING AN ACTION UNLESS IT WOULD RESULT IN THE DEATH OF THE PLAYER!
    output_format: |
      The rules should be organized into the following sections:
        1. Objective: Task size objective on what to do
        2. Gameplay: the player need to say what he would do
        3. Winning Conditions: The games end when the player succesfully exits the building or the tasks is succesfully completed. 
        4. Special Rules: if the player is in the elevator, the player cannot take the elevator and logic based rules like that

  act1:
    act_1_instruction: |
      As part of a game, testing the player on a siutation where the fire alarm is happening.
    
    act_context: |
      The game is set in a world where there is a fire alarm happening on a building. The player is trying to survive and escape the building.

    act_1_context_rules: |
      The rules should be no longer than 500 words and should avoid complex terminology. Focus on making the rules accessible to younger players.
      PLayer cannot take the elevator in case of fire
    
    constraints: |
      The rules should be no longer than 200 words and should avoid complex terminology. Focus on making the rules accessible to younger players.

    final_instruction: |
      Create the game and ask user the first question
    
    generate_env: |
      # Prompt : give me a maze (nxn) with wall char "*" and path char "."

  act2:
    instruction: |
      As part of a game, testing the player on asiutation where the fire alarm is happening.
    
    act_context: |
      The game is set in a world where there is a fire alarm happening on a building. The player is trying to survive and escape the building.

    context_rules: |
      The rules should be no longer than 500 words and should avoid complex terminology. Focus on making the rules accessible to younger players.
      PLayer cannot take the elevator in case of fire
    
    constraints: |
      The rules should be no longer than 200 words and should avoid complex terminology. Focus on making the rules accessible to younger players.

    final_instruction: |
      Create the game and ask user the first question
    
    generate_env: |
      # Prompt : give me a maze (nxn) with wall char "*" and path char "."

  act3:
    instruction: |
      As part of a game, testing the player on asiutation where the fire alarm is happening.
    
    act_context: |
      The game is set in a world where there is a fire alarm happening on a building. The player is trying to survive and escape the building.

    context_rules: |
      The rules should be no longer than 500 words and should avoid complex terminology. Focus on making the rules accessible to younger players.
      PLayer cannot take the elevator in case of fire
    
    constraints: |
      The rules should be no longer than 200 words and should avoid complex terminology. Focus on making the rules accessible to younger players.

    final_instruction: |
      Create the game and ask user the first question
    
    generate_env: |
      # Prompt : give me a maze (nxn) with wall char "*" and path char "."

 